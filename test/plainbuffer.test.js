'use strict';

const expect = require('expect.js');
const ots = require('../lib/client');
const plainbuffer = require('../lib/plainbuffer');

describe('plainbuffer', function() {
  it('serialize(primaryKeys) should ok', function() {
    var primaryKeys = {
      'uid': 'test_uid',
      'id': 1
    };

    var bytes = plainbuffer.serialize(primaryKeys);
    expect(bytes).to.eql(Buffer.from([
      0x75, 0x00, 0x00, 0x00, // tag_header
      // row
      0x01, // tag_pk
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x03, 0x00, 0x00, 0x00,
      // value_data: uid
      0x75, 0x69, 0x64,
      0x05, // tag_cell_value
      0x0d, 0x00, 0x00, 0x00,
      0x03,
      // value_type value_len value_data
      0x08, 0x00, 0x00, 0x00,
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64,
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 178,
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x02, 0x00, 0x00, 0x00,
      // value_data: id
      0x69, 0x64,
      0x05, // tag_cell_value
      // value_type value_len value_data
      0x09, 0x00, 0x00, 0x00,
      0x00, // VT_INTEGER
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 10,
      // row_checksum = tag_row_checksum row_crc8
      0x09, 190
    ]));
  });

  it('serialize(primaryKeys, columns) should ok', function() {
    var primaryKeys = {
      'uid': 'test_uid',
      'id': 1
    };

    var columns = {
      'value': 1
    };

    var bytes = plainbuffer.serialize(primaryKeys, columns);
    expect(bytes).to.eql(Buffer.from([
      0x75, 0x00, 0x00, 0x00, // tag_header
      // row
      0x01, // tag_pk
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x03, 0x00, 0x00, 0x00,
      // value_data: uid
      0x75, 0x69, 0x64,
      0x05, // tag_cell_value
      0x0d, 0x00, 0x00, 0x00,
      // value_type value_len value_data
      0x03, // VT_STRING
      0x08, 0x00, 0x00, 0x00,
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64,
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 178,
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x02, 0x00, 0x00, 0x00,
      // value_data: id
      0x69, 0x64,
      0x05, // tag_cell_value
      // value_type value_len value_data
      0x09, 0x00, 0x00, 0x00,
      0x00, // VT_INTEGER
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 0x0a,
      // attr
      0x02, // tag_attr
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x05, 0x00, 0x00, 0x00,
      // value_data: value
      0x76, 0x61, 0x6c, 0x75, 0x65,
      0x05, // tag_cell_value
      // value_type value_len value_data
      0x09, 0x00, 0x00, 0x00,
      0x00, // VT_INTEGER
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0a, 144,
      // row_checksum = tag_row_checksum row_crc8
      0x09, 210
    ]));
  });

  it('serialize(primaryKeys, {}) should ok', function() {
    var primaryKeys = {
      'appid': 1,
      'agentid': 'alibaba:JacksonTian-Air.local',
      'timestamp': '2016-06-29T08:48:26.622Z'
    };

    var bytes = plainbuffer.serialize(primaryKeys, {});
    expect(bytes).to.eql(Buffer.from([
      0x75, 0x00, 0x00, 0x00, // tag_header
      // row
      0x01, // tag_pk
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x05, 0x00, 0x00, 0x00,
      // value_data: appid
      0x61, 0x70, 0x70, 0x69, 0x64,
      0x05, // tag_cell_value
      0x09, 0x00, 0x00, 0x00,
      // value_type value_len value_data
      0x00, // VT_INTEGER
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 1
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 241,
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x07, 0x00, 0x00, 0x00,
      // value_data: agentid
      0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64,
      0x05, // tag_cell_value
      0x22, 0x00, 0x00, 0x00,
      // value_type value_len value_data
      0x03, // VT_STRING
      0x1d, 0x00, 0x00, 0x00, // string length
      0x61, 0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x3a,
      0x4a, 0x61, 0x63, 0x6b, 0x73, 0x6f, 0x6e, 0x54,
      0x69, 0x61, 0x6e, 0x2d, 0x41, 0x69, 0x72, 0x2e,
      0x6c, 0x6f, 0x63, 0x61, 0x6c, // alibaba:JacksonTian-Air.local
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 156,
      0x03, // tag_cell
      0x04, // tag_cell_name
      // value_type value_len value_data
      // value_len
      0x09, 0x00, 0x00, 0x00,
      // value_data: timestamp
      0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
      0x70,
      0x05, // tag_cell_value
      0x1d, 0x00, 0x00, 0x00,
      // value_type value_len value_data
      0x03, // VT_STRING
      0x18, 0x00, 0x00, 0x00, // string length
      0x32, 0x30, 0x31, 0x36, 0x2d, 0x30, 0x36, 0x2d,
      0x32, 0x39, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x38,
      0x3a, 0x32, 0x36, 0x2e, 0x36, 0x32, 0x32, 0x5a, //
      // cell_checksum = tag_cell_checksum row_crc8
      0x0a, 174,
      0x09, 136
    ]));
  });

  it('Value(double) should ok', function() {
    var Value = plainbuffer.Value;
    var data = plainbuffer.DoubleColumn('name', 1.1);
    var value = new Value(data.type, data.value);
    expect(value.toBytes()).to.eql(Buffer.from([
      0x01, // DOUBLE
      0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f
    ]));
  });

  it('Value(boolean/true) should ok', function() {
    var Value = plainbuffer.Value;
    var data = plainbuffer.BooleanColumn('name', true);
    var value = new Value(data.type, data.value);
    expect(value.toBytes()).to.eql(Buffer.from([
      0x02, // BOOLEAN
      0x01
    ]));
  });

  it('Value(boolean/false) should ok', function() {
    var Value = plainbuffer.Value;
    var data = plainbuffer.BooleanColumn('name', false);
    var value = new Value(data.type, data.value);
    expect(value.toBytes()).to.eql(Buffer.from([
      0x02, // BOOLEAN
      0x00
    ]));
  });

  xit('Value(null) should ok', function() {
    var Value = plainbuffer.Value;
    var data = ots.NullColumn('name');
    var value = new Value(data.type, data.value);
    expect(value.toBytes()).to.eql(Buffer.from([
      0x06,
      0x01
    ]));
  });

  it('Value(blob) should ok', function() {
    var Value = plainbuffer.Value;
    var data = plainbuffer.BlobColumn('name', Buffer.from([0x01, 0x02]));
    var value = new Value(data.type, data.value);
    expect(value.toBytes()).to.eql(Buffer.from([
      0x07,
      0x02, 0x00, 0x00, 0x00,
      0x01, 0x02
    ]));
  });

  it('deserialize should ok', function() {
    var buff = Buffer.from([
      // tag header
      0x75, 0x0, 0x0, 0x0,
      0x1, // tag_pk
      0x3, // tag_cell
      0x4, // tag_cell_name
      0x3, 0x0, 0x0, 0x0, // length
      0x75, 0x69, 0x64, // uid
      0x5, // tag_cell_value
      0xd, 0x0, 0x0, 0x0, // length
      0x3, // type
      0x8, 0x0, 0x0, 0x0, // length
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64,
      // tag_cell_checksum
      0xa, 0xb2,
      // tag_attr
      0x2,
      0x3, // tag_cell
      0x4, // tag_cell_name
      0x4, 0x0, 0x0, 0x0,
      0x74, 0x65, 0x73, 0x74,
      0x5, // tag_cell_value
      0xf, 0x0, 0x0, 0x0, // length
      0x3, // type
      0xa, 0x0, 0x0, 0x0, // length
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
      0x75, 0x65, // value
      0x7, // tag_cell_ts
      0xd5, 0xe4, 0x88, 0x90, 0x55, 0x1, 0x0, 0x0,
      // tag_cell_checksum
      0xa, 0xd9,
      // tag_row_checksum
      0x9, 0x3b
    ]);

    var row = {
      buffer: buff,
      offset: 0,
      markedOffset: -1,
      limit: 88,
      littleEndian: true,
      noAssert: false
    };

    var rows = plainbuffer.deserialize(row);
    var deserialized = rows[0];

    expect(deserialized).to.eql({
      uid: 'test_uid',
      test: 'test_value'
    });
  });

  it('deserialize(range) should ok', function() {
    var buff = Buffer.from([
      0x75, 0x0, 0x0, 0x0, // tag header
      0x1, // tag_pk
      0x3, // tag_cell
      0x4, // tag_cell_name
      0x5, 0x0, 0x0, 0x0, // length
      0x61, 0x70, 0x70, 0x69, 0x64, // name
      0x5, // tag_cell_value
      0x9, 0x0, 0x0, 0x0, // length
      0x0, // type interger
      0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // value
      0xa, 0xf1, // tag_cell_checksum checksum
      0x3, // tag_cell
      0x4,
      0x7, 0x0, 0x0, 0x0,
      0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64,
      0x5, // tag_cell_value
      0xe, 0x0, 0x0, 0x0, // length
      0x3, // type string
      0x9, 0x0, 0x0, 0x0, // string length
      0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
      0xa, 0x6d, // tag_cell_checksum checksum
      0x3,
      0x4,
      0x9, 0x0, 0x0, 0x0,
      0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
      0x5, // tag_cell_value
      0x1d, 0x0, 0x0, 0x0,
      0x3, // type string
      0x18, 0x0, 0x0, 0x0, // string length
      0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x31, 0x2d,
      0x32, 0x39, 0x54, 0x31, 0x35, 0x3a, 0x35, 0x35,
      0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x5a,
      0xa, 0x4d, // tag_cell_checksum checksum
      0x2,
      0x3, 0x4, 0x3, 0x0, 0x0, 0x0, 0x63, 0x70, 0x75, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x6c, 0x7f, 0x4b, 0xbb, 0xc3, 0x64, 0xc3, 0x3f, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xc8,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0xcc, 0xa4, 0xf4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xb5,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xdd, 0x3f, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x30,
      0x3, 0x4, 0x6, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xd6, 0x3f, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x9e,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xda, 0x3f, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x96,
      0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x21, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x7, 0x51, 0x62, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xc8, 0x9, 0xf0, 0x1,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0xf1,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5, 0xe, 0x0, 0x0, 0x0, 0x3, 0x9, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0xa, 0x6d,
      0x3, 0x4, 0x9, 0x0, 0x0, 0x0, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5, 0x1d, 0x0, 0x0, 0x0, 0x3, 0x18, 0x0, 0x0, 0x0, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x31, 0x2d, 0x32, 0x39, 0x54, 0x31, 0x35, 0x3a, 0x35, 0x36, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x5a, 0xa, 0xc6, 0x2,
      0x3, 0x4, 0x3, 0x0, 0x0, 0x0, 0x63, 0x70, 0x75, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x6c, 0x7f, 0x4b, 0xbb, 0xc3, 0x64, 0xc3, 0x3f, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xf6,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x88, 0xa7, 0xf4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xdb,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xdd, 0x3f, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xe,
      0x3, 0x4, 0x6, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xd6, 0x3f, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xa0,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xda, 0x3f, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xa8,
      0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x21, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x7, 0x5f, 0x64, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xf6, 0x9, 0xc9, 0x1,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0xf1,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5, 0xe, 0x0, 0x0, 0x0, 0x3, 0x9, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0xa, 0x6d,
      0x3, 0x4, 0x9, 0x0, 0x0, 0x0, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5, 0x1d, 0x0, 0x0, 0x0, 0x3, 0x18, 0x0, 0x0, 0x0, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x31, 0x2d, 0x32, 0x39, 0x54, 0x31, 0x35, 0x3a, 0x35, 0x37, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x5a, 0xa, 0xbf, 0x2,
      0x3, 0x4, 0x3, 0x0, 0x0, 0x0, 0x63, 0x70, 0x75, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x6c, 0x7f, 0x4b, 0xbb, 0xc3, 0x64, 0xc3, 0x3f, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xc0,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x80, 0x63, 0x45, 0x2, 0x0, 0x0, 0x0, 0x0, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xac,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xdd, 0x3f, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x38,
      0x3, 0x4, 0x6, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xd6, 0x3f, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x96,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xda, 0x3f, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x9e,
      0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x21, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x7, 0x70, 0x66, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xc0, 0x9, 0xae, 0x1,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0xf1,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5, 0xe, 0x0, 0x0, 0x0, 0x3, 0x9, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0xa, 0x6d,
      0x3, 0x4, 0x9, 0x0, 0x0, 0x0, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5, 0x1d, 0x0, 0x0, 0x0, 0x3, 0x18, 0x0, 0x0, 0x0, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x31, 0x2d, 0x32, 0x39, 0x54, 0x31, 0x35, 0x3a, 0x35, 0x38, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x5a, 0xa, 0x16, 0x2,
      0x3, 0x4, 0x3, 0x0, 0x0, 0x0, 0x63, 0x70, 0x75, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x6c, 0x7f, 0x4b, 0xbb, 0xc3, 0x64, 0xc3, 0x3f, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x7c,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd6, 0xe9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xec,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xdd, 0x3f, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x84,
      0x3, 0x4, 0x6, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xd6, 0x3f, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x2a,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xda, 0x3f, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x22,
      0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x21, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x7, 0xb0, 0x67, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x7c, 0x9, 0x61, 0x1,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0xf1,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5, 0xe, 0x0, 0x0, 0x0, 0x3, 0x9, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0xa, 0x6d,
      0x3, 0x4, 0x9, 0x0, 0x0, 0x0, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5, 0x1d, 0x0, 0x0, 0x0, 0x3, 0x18, 0x0, 0x0, 0x0, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x31, 0x2d, 0x32, 0x39, 0x54, 0x31, 0x35, 0x3a, 0x35, 0x39, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x5a, 0xa, 0x6f, 0x2,
      0x3, 0x4, 0x3, 0x0, 0x0, 0x0, 0x63, 0x70, 0x75, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x6c, 0x7f, 0x4b, 0xbb, 0xc3, 0x64, 0xc3, 0x3f, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xf7,
      0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x8e, 0x13, 0x0, 0x0, 0x0, 0x0, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xed,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xd9, 0x3f, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xdf,
      0x3, 0x4, 0x6, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdc, 0x3f, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0x4e,
      0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x5, 0x9, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x3f, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xe8,
      0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x5, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x21, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x7, 0xbb, 0x69, 0x54, 0x9a, 0x55, 0x1, 0x0, 0x0, 0xa, 0xf7, 0x9, 0x23
    ]);

    var row = {
      buffer: buff,
      offset: 0,
      markedOffset: -1,
      limit: 1684,
      littleEndian: true,
      noAssert: false
    };

    var rows = plainbuffer.deserialize(row);

    expect(rows).to.have.length(5);
    expect(rows[0]).to.eql({
      appid: 1,
      agentid: 'localhost',
      timestamp: '2015-11-29T15:55:00.000Z',
      cpu: 0.15151259083995272,
      freemem: 32810188,
      load1: 0.46484375,
      load15: 0.35546875,
      load5: 0.42041015625,
      totalmem: 2099363840
    });
  });
});
